
enclave 
{

	from "../../../core/enclave/lb_core_edge.edl" import *;

    trusted 
    {
		public void ecall_test(void);
		
		public void ecall_mos_test([in, string]const char* config_file_path);
    };
	
	//Import ECALL/OCALL from sub-directory EDLs.
	//[from]: specifies the location of EDL file. 
	//[import]: specifies the functions to import.
	//[*]: implies to import all functions.
		
	from "sgx_tstdc.edl" import sgx_thread_wait_untrusted_event_ocall, sgx_thread_set_untrusted_event_ocall, sgx_thread_setwait_untrusted_events_ocall, sgx_thread_set_multiple_untrusted_events_ocall;

	


    untrusted 
	{
		//ocall_print_string - invokes OCALL to display string buffer inside the enclave.
		//   [in]: copy the string buffer to App outside.
		//   [string]: specifies 'str' is a NULL terminated buffer.
		void ocall_print_string2([in, string] const char *str);
		void ocall_get_time2([out, size=8] int *second, [out, size=8] int *nanosecond);

		void ocall_get_data(int data_id, [out]char** val, [out]int* len);
		
		void ocall_read_dir([in, string]char* dirPaht, [out]char** allFiles, [out]int* fileCount, int subfile);
		void ocall_file_size([in, string]char* filePath, [out]int* len);

		void ocall_read_file([in, string]char* filePath, [out] char** out, [in, out]int* len, int pos);
		void ocall_write_file([in, string]char* filePath, [in, size=len] char* src, int len, int append);

		void ocall_malloc([out] void** pointer, int size);
		void ocall_free([user_check]void* pointer);
		void ocall_del([user_check]void* pointer, int isArray);
							
		void ocall_rand([out] int *rand_num, int mod);

		int ocall_sfbpf_compile(int snaplen_arg, int linktype_arg, [out, size=24]char *program, [in, string]const char *buf, int optimize, int mask);
		int ocall_sfbpf_filter([in, size=8]const char *pc, [in, size=buflen]const char *p, int wirelen, int buflen);
		void ocall_sfbpf_freecode([in, size=24]char *program);

		void ocall_pcap_init([in] char* filename);
		void ocall_pcap_next([out] char** pkt, [out, size = 24] char* pcap_pkthdr);

		void ocall_load_config([in, string] const char* filename, [out, size=40]char* g_config);

		void ocall_dfc_init([out] char** pattern_pool, [out] int **pattern_length, [out]int* size);
	};

};
